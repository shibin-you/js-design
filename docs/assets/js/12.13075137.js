(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{171:function(t,_,v){"use strict";v.r(_);var e=v(0),r=Object(e.a)({},function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("div",{staticClass:"content"},[t._m(0),t._v(" "),v("p",[v("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN地址"),v("OutboundLink")],1)]),t._v(" "),v("p",[t._v("正则表达式是用于匹配字符串中字符组合的模式。在 JavaScript中，正则表达式也是对象。这些模式被用于 RegExp 的 exec 和 test 方法, 以及 String 的 match、replace、search 和 split 方法。")]),t._v(" "),v("p",[t._v("语法")]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8)])},[function(){var t=this.$createElement,_=this._self._c||t;return _("h1",{attrs:{id:"正则表达式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式","aria-hidden":"true"}},[this._v("#")]),this._v(" 正则表达式")])},function(){var t=this.$createElement,_=this._self._c||t;return _("div",{staticClass:"warning custom-block"},[_("p",{staticClass:"custom-block-title"},[this._v("注意")]),this._v(" "),_("p",[this._v("当使用构造函数创造正则对象时，需要常规的字符转义规则（在前面加反斜杠 \\）")])])},function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("div",{staticClass:"language-javascript extra-class"},[v("pre",{pre:!0,attrs:{class:"language-javascript"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),v("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/^(\\w+)\\1+$/")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 或")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"^(\\\\w+)\\\\1+$"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,_=this._self._c||t;return _("ul",[_("li",[this._v("修饰符")])])},function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("table",[v("thead",[v("tr",[v("th",[t._v("修饰符")]),t._v(" "),v("th",[t._v("含义")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("code",[t._v("i")])]),t._v(" "),v("td",[t._v("执行对大小写不敏感的匹配。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("g")])]),t._v(" "),v("td",[t._v("执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("m")])]),t._v(" "),v("td",[t._v("执行多行匹配。")])])])])},function(){var t=this.$createElement,_=this._self._c||t;return _("ul",[_("li",[this._v("字符")])])},function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("table",[v("thead",[v("tr",[v("th",[t._v("字符")]),t._v(" "),v("th",[t._v("含义")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("code",[t._v("\\")])]),t._v(" "),v("td",[t._v("匹配将依照下列规则："),v("br"),v("br"),t._v("在非特殊字符之前的反斜杠表示下一个字符是特殊的，不能从字面上解释。例如，前面没有"),v("code",[t._v("'\\'")]),t._v("的"),v("code",[t._v("'b'")]),t._v("通常匹配小写"),v("code",[t._v("'b'")]),t._v("，无论它们出现在哪里。如果加了"),v("code",[t._v("'\\'")]),t._v(",这个字符变成了一个特殊意义的字符，意思是匹配一个字符边界。"),v("br"),v("br"),t._v("反斜杠也可以将其后的特殊字符，转义为字面量。例如，模式 "),v("code",[t._v("/a*/")]),t._v(" 代表会匹配 0 个或者多个 a。相反，模式 "),v("code",[t._v("/a\\*/")]),t._v(" 将 "),v("code",[t._v("'*'")]),t._v(" 的特殊性移除，从而可以匹配像 "),v("code",[t._v('"a*"')]),t._v(" 这样的字符串。"),v("br"),v("br"),t._v("使用 "),v("code",[t._v('new RegExp("pattern")')]),t._v(" 的时候不要忘记将 \\ 进行转义，因为 \\ 在字符串里面也是一个转义字符。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("^")])]),t._v(" "),v("td",[t._v("匹配输入的开始。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("$")])]),t._v(" "),v("td",[t._v("匹配输入的结束。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("*")])]),t._v(" "),v("td",[t._v("配前一个表达式0次或多次。等价于 "),v("code",[t._v("{0,}")]),t._v("。"),v("br"),v("br"),t._v('例如，/bo*/会匹配 "A ghost boooooed" 中的 \'booooo\' 和 "A bird warbled" 中的 \'b\'，但是在 "A goat grunted" 中将不会匹配任何东西')])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("+")])]),t._v(" "),v("td",[t._v("匹配前面一个表达式1次或者多次。等价于 "),v("code",[t._v("{1,}")]),t._v("。"),v("br"),v("br"),t._v("例如，/a+/匹配了在 \"candy\" 中的 'a'，和在 \"caaaaaaandy\" 中所有的 'a'。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("?")])]),t._v(" "),v("td",[t._v("匹配前面一个表达式0次或者1次。等价于 "),v("code",[t._v("{0,1}")]),t._v("。"),v("br"),v("br"),t._v("例如，/e?le?/ 匹配 \"angel\" 中的 'el'，和 \"angle\" 中的 'le' 以及\"oslo' 中的'l'。"),v("br"),v("br"),t._v("如果紧跟在任何量词"),v("code",[t._v("*、 +、?")]),t._v("或 "),v("code",[t._v("{}")]),t._v(" 的后面，将会使量词变为非贪婪的（匹配尽量少的字符），和缺省使用的贪婪模式（匹配尽可能多的字符）正好相反。"),v("br"),v("br")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v(".")])]),t._v(" "),v("td",[t._v("（小数点）匹配除换行符之外的任何单个字符。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("(x)")])]),t._v(" "),v("td",[t._v("匹配 'x' 并且记住匹配项，就像下面的例子展示的那样。括号被称为 捕获括号。"),v("br"),v("br"),t._v("模式"),v("code",[t._v("/(foo) (bar) \\1 \\2/")]),t._v("中的 '(foo)' 和 '(bar)' 匹配并记住字符串 \"foo bar foo bar\" 中前两个单词。模式中的 \\1 和 \\2 匹配字符串的后两个单词。注意 \\1、\\2、\\n 是用在正则表达式的匹配环节。在正则表达式的替换环节，则要使用像 $1、$2、$n 这样的语法，例如，'bar foo'.replace( /(...) (...)/, '$2 $1' )。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("\\d")])]),t._v(" "),v("td",[t._v("匹配一个数字。"),v("br"),v("br"),t._v("等价于[0-9]。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("\\D")])]),t._v(" "),v("td",[t._v("匹配一个非数字字符。"),v("br"),v("br"),t._v("等价于[^0-9]。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("\\s")])]),t._v(" "),v("td",[t._v("匹配一个空白字符，包括空格、制表符、换页符和换行符。"),v("br"),v("br"),t._v("例如, /\\s\\w*/ 匹配\"foo bar.\"中的' bar'。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("\\S")])]),t._v(" "),v("td",[t._v("匹配一个非空白字符。"),v("br"),v("br"),t._v("例如， /\\S\\w*/ 匹配\"foo bar.\"中的'foo'。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("\\w")])]),t._v(" "),v("td",[t._v("匹配一个单字字符（字母、数字或者下划线）。"),v("br"),v("br"),t._v("等价于[A-Za-z0-9_]。"),v("br"),v("br"),t._v("例如, /\\w/ 匹配 \"apple,\" 中的 'a'，\"$5.28,\"中的 '5' 和 \"3D.\" 中的 '3'。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("\\W")])]),t._v(" "),v("td",[t._v("匹配一个非单字字符。"),v("br"),v("br"),t._v("等价于[^A-Za-z0-9_]"),v("br"),v("br"),t._v("例如, /\\W/ 或者 /[^A-Za-z0-9_]/ 匹配 \"50%.\" 中的 '%'。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("\\n")])]),t._v(" "),v("td",[t._v("在正则表达式中，它返回最后的第n个子捕获匹配的子字符串(捕获的数目以左括号计数)。"),v("br"),v("br"),t._v("比如 /apple(,)\\sorange\\1/ 匹配\"apple, orange, cherry, peach.\"中的'apple, orange,'")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("\\b")])]),t._v(" "),v("td",[t._v("匹配一个词的边界。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("\\B")])]),t._v(" "),v("td",[t._v("匹配一个非单词边界")])])])])},function(){var t=this.$createElement,_=this._self._c||t;return _("ul",[_("li",[this._v("方括号")])])},function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("table",[v("thead",[v("tr",[v("th",[t._v("表达式")]),t._v(" "),v("th",[t._v("含义")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[v("code",[t._v("[xyz]")])]),t._v(" "),v("td",[t._v("查找方括号之间的任何字符。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("[^xyz]")])]),t._v(" "),v("td",[t._v("查找任何不在方括号之间的字符。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("[0-9]")])]),t._v(" "),v("td",[t._v("查找任何从 0 至 9 的数字。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("[a-z]")])]),t._v(" "),v("td",[t._v("查找任何从小写 a 到小写 z 的字符。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("[A-Z]")])]),t._v(" "),v("td",[t._v("查找任何从大写 A 到大写 Z 的字符。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("[A-z]")])]),t._v(" "),v("td",[t._v("查找任何从大写 A 到小写 z 的字符。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("[adgk]")])]),t._v(" "),v("td",[t._v("查找给定集合内的任何字符。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("[^adgk]")])]),t._v(" "),v("td",[t._v("查找给定集合外的任何字符。")])]),t._v(" "),v("tr",[v("td",[v("code",[t._v("(red|blue|green)")])]),t._v(" "),v("td",[t._v("查找任何指定的选项。")])])])])}],!1,null,null,null);r.options.__file="regx.md";_.default=r.exports}}]);